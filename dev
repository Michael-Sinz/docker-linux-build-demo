#!/bin/bash
_dir=$(cd $(dirname $0); pwd)

# Just to make sure these exists (they should
# albeit out may not
mkdir -p ${_dir}/src ${_dir}/out ${_dir}/home

# The container image we will use
_image="dev-personal"

# We will be using docker run with --rm to clean
# up the container when it exits.
_cmd="docker run --rm"

# This allows the build to potentially interact
# with the console - it also allows stdout and stderr
# to be separate
_cmd="${_cmd} --interactive" 

# This lets the container have access to the tty
# which alows rich interfaces such as what Linux
# "make menuconfig" uses.
_cmd="${_cmd} --tty"

# This is not needed if we use the dev-personal
# locally build container.  So we can skip this
# as the container already has this
#_cmd="${_cmd} --user $(id -u):$(id -g)"

# We set the host name to be the "dev-" prefix
# of the hostname that we are running on.  This
# is not strictly required but it allows for a
# better command prompt in the container.  It
# could also hold other information that is useful
# when running the container in interactive mode.
_cmd="${_cmd} --hostname dev-$(hostname)"

# Mount the source tree as read-only into "/src"
_cmd="${_cmd} --volume ${_dir}/src:/src:ro"

# Mount the output tree as read-write into "/out"
_cmd="${_cmd} --volume ${_dir}/out:/out"

# We do a mount the home directory from
# the source tree such that we can include some
# useful scripts/tools.  However, this is just
# one example of what we can do for that.  Maybe
# everything is really in the source tree and we
# just reference it. 
_cmd="${_cmd} --volume ${_dir}/home:/home/build:ro"

set -x
${_cmd} ${_image} "$@"